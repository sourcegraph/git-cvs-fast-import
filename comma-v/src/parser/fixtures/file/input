head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2021.08.11.19.08.27;	author adam;	state Exp;
branches;
next	1.3;

1.3
date	2021.08.11.19.05.55;	author adam;	state Exp;
branches;
next	1.2;

1.2
date	2021.08.11.19.05.12;	author adam;	state Exp;
branches;
next	1.1;

1.1
date	2021.08.11.19.03.37;	author adam;	state Exp;
branches;
next	;


desc
@@


1.4
log
@s/campaign/batch change/ (#489)

* Rename command files.

* cmd/src campaigns → batch

* Minimal package renames.

* schemata changes

* non-GraphQL renames

* Rename Docker image.

* Migrate GraphQL.

* update readme

* Update canned errors in tests.

* changelog

* insert pr number here
@
text
@package schema

//go:generate env GO111MODULE=on go run stringdata.go -i batch_spec.schema.json -name BatchSpecJSON -pkg schema -o batch_spec_stringdata.go
//go:generate gofmt -s -w batch_spec_stringdata.go
@


1.3
log
@remove unused ActionSchemaJSON (#329)

This was for the old campaigns design.
@
text
@d3 2
a4 2
//go:generate env GO111MODULE=on go run stringdata.go -i campaign_spec.schema.json -name CampaignSpecJSON -pkg schema -o campaign_spec_stringdata.go
//go:generate gofmt -s -w campaign_spec_stringdata.go
@


1.2
log
@campaigns: move campaign spec schema to ./schema (#286)

Originally, I intended the string constant in internal/campaigns to be a
stopgap until a route was added to sourcegraph/sourcegraph to allow for
downloading the schema, thereby allowing sourcegraph/sourcegraph to be the
single source of truth for spec schemas.

However, after working more on prototyping schema changes, I've come to realise
that I was mistaken, and that the tight coupling of the CampaignSpec type in
internal/campaigns to the schema proper makes it — at best — extremely
difficult to have the schema come from an external source.

Therefore, we need a more robust solution to handle the schema than
copy/pasting the raw JSON into a string constant, getting a compile error
because I forget there are backticks in the schema, and fixing those by hand.
We already have the bits needed in schema to handle stringdata generation, so
let's apply that here.
@
text
@a2 3
//go:generate env GO111MODULE=on go run stringdata.go -i actions.schema.json -name ActionSchemaJSON -pkg schema -o action_stringdata.go
//go:generate gofmt -s -w action_stringdata.go

@


1.1
log
@Validate action definitions against the JSON schema (#171)

This fixes #155.
@
text
@d5 3
@

